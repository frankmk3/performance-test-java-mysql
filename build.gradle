import java.text.SimpleDateFormat

plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'application'
	id 'jacoco'
	id 'com.palantir.docker' version '0.25.0'
}

group = 'com.test.performance.mysql'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

def swaggerVersion = "3.0.0"

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'mysql:mysql-connector-java'
	//lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //swagger
	implementation("io.springfox:springfox-boot-starter:${swaggerVersion}")
    //serialization
	implementation("javax.xml.bind:jaxb-api:2.3.1")
    //testing
	testImplementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2:1.4.200'
}


bootJar {
	archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"

	manifest {
		attributes 'Implementation-Title': "$archiveBaseName.$archiveExtension",
				'Implementation-Version': archiveVersion,
				'Tag-Version': 'git describe --tags'.execute().text.trim(),
				'Build-Time': new SimpleDateFormat().format(new Date())
	}
}

docker {
	name "${project.group}/${jar.getArchiveBaseName().get()}"
	copySpec.from("build/libs/").into("build/libs/")
	dockerfile file('Dockerfile')
}

[bootRun].each { runTask ->
	configure(runTask) {
		systemProperties System.properties
	}
}

bootRun {
	if (project.hasProperty('args')) {
		args = (project.args.split("\\s+") as List)
	}
}

springBoot {
	buildInfo()
}


jacoco {
	applyTo run
	toolVersion = "0.8.6"
	reportsDir = file("$buildDir/jacoco/customJacocoReportDir")
}

task applicationCodeCoverageReport(type: JacocoReport) {
	executionData run
	sourceSets sourceSets.main
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/jacoco/jacocoHtml")
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			excludes = []
			limit {
				minimum = 0.8
			}
		}
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
	finalizedBy jacocoTestCoverageVerification // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}